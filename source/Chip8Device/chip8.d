import cpu;
import display;

immutable size_t memSize = 4 * 1024;
immutable size_t progStart = 0x200;
immutable ubyte[] numberSprites = [
    0xF0, 0x90, 0x90, 0x90, 0xF0,    // 0
    0x20, 0x60, 0x20, 0x20, 0x70,    // 1
    0xF0, 0x10, 0xF0, 0x80, 0xF0,    // 2
    0xF0, 0x10, 0xF0, 0x10, 0xF0,    // 3
    0x90, 0x90, 0xF0, 0x10, 0x10,    // 4
    0xF0, 0x80, 0xF0, 0x10, 0xF0,    // 5
    0xF0, 0x80, 0xF0, 0x90, 0xF0,    // 6
    0xF0, 0x10, 0x20, 0x40, 0x40,    // 7
    0xF0, 0x90, 0xF0, 0x90, 0xF0,    // 8
    0xF0, 0x90, 0xF0, 0x10, 0xF0,    // 9
    0xF0, 0x90, 0xF0, 0x90, 0x90,    // A
    0xE0, 0x90, 0xE0, 0x90, 0xE0,    // B
    0xF0, 0x80, 0x80, 0x80, 0xF0,    // C
    0xE0, 0x90, 0x90, 0x90, 0xE0,    // D
    0xF0, 0x80, 0xF0, 0x80, 0xF0,    // E
    0xF0, 0x80, 0xF0, 0x80, 0x80     // F
];
immutable ubyte[] numberSpriteAddresses = [
    0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75
];

struct Chip8Device
{
private:
    CPU _cpu;
    Display _display;

public:
    ubyte[] memory;

    this(ubyte[] rom)
    {
        memory = new ubyte[memSize];
        memory[progStart .. progStart+rom.length] = rom[];
        memory[0 .. numberSprites.length] = numberSprites[];
        _cpu = new CPU(&this);
        _display = new Display();
    }

    void run(size_t len)
    {
        _cpu.run(len);
    }

    void clearDisplay()
    {
        _display.clear();
    }
}
